What happens when you initialize a repo? Why do you need to do it?

Commit and git tracking structure begins - no commit yet. Files for tracking in commits identified.

Files added to directory before commit are also included in  'git status'

How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area is location of files after 'git add'. It is a logical separation and designation of files for pending commits. This allows
modification before commit is complete.

** git diff with no arguments shows changes to the working directory, but
NOT NOT added to the staging area.

git diff --staged is changes to staging area but not yet committed.

git reset --hard is NOT reversible

How can you use the staging area to make sure you have one commit per logical change?

Place the files which comprise a logical change into the staging area as a group - then commit.
git status
'master' is name given to main branch in most repositories

current last commit on a branch is called the "tip" of the respective branch

merging -> combining two commits

git branch <blank> shows branches

git checkout 'name' switches branch to 'name', important to ensure changes are committed to the branch in work and not to master!!

Use branching to support checkout and tests until commit done for new master

branch - something significant and different - context switching - 
master - production quality
branches - dev work - active development
feature or experimental branches

branches good when collaborating with yourself - get away from feature and fix the bug - compartmentalize work - 

workflow -
every feature or bug-fix
diagrams are helpful

remote branch - another's branch

** git log applies to current branch - not all branches


How do the diagrams help you visualize the branch structure?
Essential - clarifies the existence of branches - relationships - identifies which branch you are on and how to create and checkout new branch promptly


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merge is colloquial, should be "merge-interleave". Parent commit status for each branch is retained.

git show is very helpful to determine parent commit and changes if SHA is not available. Compares a commit to its parent.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Not an advantage to auto merging - do not do it.
Basically git manages integration of updates in creativity and IP development - cannot be done wll automatically

merges must be done with reflection and discussion

git and merge provides a "meta" layer overlay for design and code
